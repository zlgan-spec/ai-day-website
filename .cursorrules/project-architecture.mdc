# 项目开发规则

## 📚 文档架构规则

### 文档职责

#### PRD.md（产品需求文档）
- ✅ 包含：产品功能需求、用户故事、业务逻辑、验收标准  
- ✅ 可以包含：技术栈选择（简化版）、性能要求（产品层面）、兼容性要求  
- ❌ 不包含：技术实现细节、代码规范、架构原则、技术选择理由  

#### SPEC.md（技术规范文档）
- ✅ 包含：技术架构原则、代码规范、技术选择理由、开发约束、ADR  
- ✅ 职责：定义技术边界，避免过度设计，统一技术决策  
- 🔗 与 PRD.md 关系：PRD 说明"用什么"，SPEC 解释"为什么用"  

#### README.md（项目介绍）
- ✅ 保留根目录唯一一份  
- ✅ 包含：项目介绍、快速开始、文档导航、测试流程  

### 文档更新原则
1. 功能变更 → 更新 PRD.md  
2. 技术变更 → 更新 SPEC.md  
3. 两个文档互补引用，避免重复  
4. 相同内容只在一个文档中维护  

---

## 🏗️ 项目架构规则

### 技术栈标准(已确定，不随意变更)
```yaml
前端: HTML5 + Tailwind CSS + Vanilla JavaScript (ES6+)
后端: Supabase (PostgreSQL + Auth + Realtime)
部署: 静态托管 (Vercel/Netlify)
```

### 架构原则 (来自SPEC.md)
1. **简洁优先**: 简单 > 复杂，原生 > 框架
2. **渐进增强**: 不破坏现有功能的持续改进  
3. **最少依赖**: 避免引入大型框架和复杂工具链

### 文件结构标准
```
project/
├── README.md              # 项目介绍 + 文档导航
├── pages/                 # 页面HTML文件
├── assets/
│   ├── js/
│   │   ├── common.js      # 公共功能
│   │   ├── pages/         # 页面专用逻辑
│   │   └── [功能].js       # 功能模块
│   └──css/                # 样式文件
├── config/                # 配置文件
├── scripts/db/            # 数据库脚本
└── docs/
    ├── PRD.md             # 产品需求文档
    ├── SPEC.md            # 技术规范文档
    ├── DEVELOPMENT_GUIDE.md # 开发指南
    ├── DEPLOYMENT_GUIDE.md  # 部署指南
    └── archived/            # 历史文档归档
```

## 🚨 重要提醒

### 文档架构原则 (核心!)
- PRD.md = 产品需求文档，专注产品层面，不包含技术实现细节
- SPEC.md = 技术规范文档，专注技术层面，定义开发标准和架构原则
- 两个文档职责清晰，相互补充，避免重复

### 技术原则说明
- **架构原则** = 面向开发执行层面，指导代码和架构的日常实现  
- **技术选择原则** = 面向选型决策层面，用于团队在评审和选型时统一标准 

### 技术选择原则
- 简单 > 复杂
- 原生 > 框架  
- 静态 > 动态
- 本地 > 远程

### 开发理念
- 项目是活动工具，重点是快速交付和稳定运行，不是技术展示
- 功能第一，优化第二
- 避免过度工程和炫技方案
- 避免在上线过程中泄露安全信息（如数据库密钥、API Key、环境变量），一律使用配置文件或环境变量方式管理，绝不写死在代码中

---

**重要**: 这些规则代表了项目的核心设计原则。在建议修改时，请始终参考这些规则，确保建议符合已确定的架构和原则。
description:
globs:
alwaysApply: true
---
